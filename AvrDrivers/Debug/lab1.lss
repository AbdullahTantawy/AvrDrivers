
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba3  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074d  00000000  00000000  00001017  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005aa  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002eb  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	
	H_Led_Init(BLU_LED_PIN);
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	0e 94 6d 00 	call	0xda	; 0xda <H_Led_Init>
	H_Led_Init(RED_LED_PIN);
  72:	8e e1       	ldi	r24, 0x1E	; 30
  74:	0e 94 6d 00 	call	0xda	; 0xda <H_Led_Init>
	H_Led_Init(GRN_LED_PIN);
  78:	8f e1       	ldi	r24, 0x1F	; 31
  7a:	0e 94 6d 00 	call	0xda	; 0xda <H_Led_Init>
	
	//H_Led_Blinktwice();
    while (1) 
    {
		H_Led_On(BLU_LED_PIN);
  7e:	80 e2       	ldi	r24, 0x20	; 32
  80:	0e 94 71 00 	call	0xe2	; 0xe2 <H_Led_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
		_delay_ms(BLINK_TIME);
		H_Led_Off(BLU_LED_PIN);
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	0e 94 75 00 	call	0xea	; 0xea <H_Led_Off>
		H_Led_On(RED_LED_PIN);
  9c:	8e e1       	ldi	r24, 0x1E	; 30
  9e:	0e 94 71 00 	call	0xe2	; 0xe2 <H_Led_On>
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	81 ee       	ldi	r24, 0xE1	; 225
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
		_delay_ms(BLINK_TIME);
		H_Led_Off(RED_LED_PIN);
  b4:	8e e1       	ldi	r24, 0x1E	; 30
  b6:	0e 94 75 00 	call	0xea	; 0xea <H_Led_Off>
		H_Led_On(GRN_LED_PIN);
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	0e 94 71 00 	call	0xe2	; 0xe2 <H_Led_On>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
		_delay_ms(BLINK_TIME); 
		H_Led_Off(GRN_LED_PIN); 
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	0e 94 75 00 	call	0xea	; 0xea <H_Led_Off>
  d8:	d2 cf       	rjmp	.-92     	; 0x7e <main+0x12>

000000da <H_Led_Init>:
this function to initialize the led
make the pin output
*/
void H_Led_Init(u8 local_u8_Led)
{
	M_Dio_PinMode(local_u8_Led,OUTPUT);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	0e 94 79 00 	call	0xf2	; 0xf2 <M_Dio_PinMode>
  e0:	08 95       	ret

000000e2 <H_Led_On>:
function to turn the led on 
*/
void H_Led_On(u8 local_u8_Led)
{
	
	M_Dio_PinWrite(local_u8_Led,HIGH);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	0e 94 02 01 	call	0x204	; 0x204 <M_Dio_PinWrite>
  e8:	08 95       	ret

000000ea <H_Led_Off>:
/*
function to turn the led off
*/
void H_Led_Off(u8 local_u8_Led)
{
	M_Dio_PinWrite(local_u8_Led,LOW);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	0e 94 02 01 	call	0x204	; 0x204 <M_Dio_PinWrite>
  f0:	08 95       	ret

000000f2 <M_Dio_PinMode>:
// take two arguments one to select the port and the pin
// and another to select out or input (mode)
void M_Dio_PinMode(u8 Local_u8_num , u8 Local_u8_Mode)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
  f2:	9d ec       	ldi	r25, 0xCD	; 205
  f4:	89 9f       	mul	r24, r25
  f6:	91 2d       	mov	r25, r1
  f8:	11 24       	eor	r1, r1
  fa:	29 2f       	mov	r18, r25
  fc:	26 95       	lsr	r18
  fe:	26 95       	lsr	r18
 100:	26 95       	lsr	r18
 102:	22 0f       	add	r18, r18
 104:	32 2f       	mov	r19, r18
 106:	33 0f       	add	r19, r19
 108:	33 0f       	add	r19, r19
 10a:	23 0f       	add	r18, r19
 10c:	82 1b       	sub	r24, r18
 10e:	28 2f       	mov	r18, r24
	// variable to select the port 
	u8 local_u8_Port = Local_u8_num /10;
 110:	96 95       	lsr	r25
 112:	96 95       	lsr	r25
 114:	96 95       	lsr	r25
	
	switch(Local_u8_Mode) 
 116:	66 23       	and	r22, r22
 118:	19 f0       	breq	.+6      	; 0x120 <M_Dio_PinMode+0x2e>
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	e1 f1       	breq	.+120    	; 0x196 <M_Dio_PinMode+0xa4>
 11e:	08 95       	ret
	{
		case INPUT:
		{
			switch(local_u8_Port) // select the port
 120:	92 30       	cpi	r25, 0x02	; 2
 122:	a9 f0       	breq	.+42     	; 0x14e <M_Dio_PinMode+0x5c>
 124:	18 f4       	brcc	.+6      	; 0x12c <M_Dio_PinMode+0x3a>
 126:	91 30       	cpi	r25, 0x01	; 1
 128:	31 f0       	breq	.+12     	; 0x136 <M_Dio_PinMode+0x44>
 12a:	08 95       	ret
 12c:	93 30       	cpi	r25, 0x03	; 3
 12e:	d9 f0       	breq	.+54     	; 0x166 <M_Dio_PinMode+0x74>
 130:	94 30       	cpi	r25, 0x04	; 4
 132:	29 f1       	breq	.+74     	; 0x17e <M_Dio_PinMode+0x8c>
 134:	08 95       	ret
			{
				case PORT_A:	Clrbit(DDRA,Local_u8_Pin);	 break;
 136:	3a b3       	in	r19, 0x1a	; 26
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <M_Dio_PinMode+0x50>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <M_Dio_PinMode+0x4c>
 146:	80 95       	com	r24
 148:	83 23       	and	r24, r19
 14a:	8a bb       	out	0x1a, r24	; 26
 14c:	08 95       	ret
				case PORT_B:	Clrbit(DDRB,Local_u8_Pin);	 break;
 14e:	37 b3       	in	r19, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <M_Dio_PinMode+0x68>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <M_Dio_PinMode+0x64>
 15e:	80 95       	com	r24
 160:	83 23       	and	r24, r19
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
				case PORT_C:	Clrbit(DDRC,Local_u8_Pin);	 break;
 166:	34 b3       	in	r19, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <M_Dio_PinMode+0x80>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	2a 95       	dec	r18
 174:	e2 f7       	brpl	.-8      	; 0x16e <M_Dio_PinMode+0x7c>
 176:	80 95       	com	r24
 178:	83 23       	and	r24, r19
 17a:	84 bb       	out	0x14, r24	; 20
 17c:	08 95       	ret
				case PORT_D:	Clrbit(DDRD,Local_u8_Pin);	 break;
 17e:	31 b3       	in	r19, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <M_Dio_PinMode+0x98>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	2a 95       	dec	r18
 18c:	e2 f7       	brpl	.-8      	; 0x186 <M_Dio_PinMode+0x94>
 18e:	80 95       	com	r24
 190:	83 23       	and	r24, r19
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret
			}// switch port
		}
		break;// Case input
		case OUTPUT:
		{
			switch(local_u8_Port) // select the port
 196:	92 30       	cpi	r25, 0x02	; 2
 198:	a1 f0       	breq	.+40     	; 0x1c2 <M_Dio_PinMode+0xd0>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <M_Dio_PinMode+0xb0>
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	31 f0       	breq	.+12     	; 0x1ac <M_Dio_PinMode+0xba>
 1a0:	08 95       	ret
 1a2:	93 30       	cpi	r25, 0x03	; 3
 1a4:	c9 f0       	breq	.+50     	; 0x1d8 <M_Dio_PinMode+0xe6>
 1a6:	94 30       	cpi	r25, 0x04	; 4
 1a8:	11 f1       	breq	.+68     	; 0x1ee <M_Dio_PinMode+0xfc>
 1aa:	08 95       	ret
			{
				case PORT_A:	Setbit(DDRA,Local_u8_Pin);	 break;
 1ac:	3a b3       	in	r19, 0x1a	; 26
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <M_Dio_PinMode+0xc6>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <M_Dio_PinMode+0xc2>
 1bc:	83 2b       	or	r24, r19
 1be:	8a bb       	out	0x1a, r24	; 26
 1c0:	08 95       	ret
				case PORT_B:	Setbit(DDRB,Local_u8_Pin);	 break;
 1c2:	37 b3       	in	r19, 0x17	; 23
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <M_Dio_PinMode+0xdc>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <M_Dio_PinMode+0xd8>
 1d2:	83 2b       	or	r24, r19
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	08 95       	ret
				case PORT_C:	Setbit(DDRC,Local_u8_Pin);	 break;
 1d8:	34 b3       	in	r19, 0x14	; 20
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <M_Dio_PinMode+0xf2>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <M_Dio_PinMode+0xee>
 1e8:	83 2b       	or	r24, r19
 1ea:	84 bb       	out	0x14, r24	; 20
 1ec:	08 95       	ret
				case PORT_D:	Setbit(DDRD,Local_u8_Pin);	 break;
 1ee:	31 b3       	in	r19, 0x11	; 17
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <M_Dio_PinMode+0x108>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	2a 95       	dec	r18
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <M_Dio_PinMode+0x104>
 1fe:	83 2b       	or	r24, r19
 200:	81 bb       	out	0x11, r24	; 17
 202:	08 95       	ret

00000204 <M_Dio_PinWrite>:

/*******************************************************************************************************/
void M_Dio_PinWrite(u8 Local_u8_num , u8 Local_u8_Mode)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
 204:	9d ec       	ldi	r25, 0xCD	; 205
 206:	89 9f       	mul	r24, r25
 208:	91 2d       	mov	r25, r1
 20a:	11 24       	eor	r1, r1
 20c:	29 2f       	mov	r18, r25
 20e:	26 95       	lsr	r18
 210:	26 95       	lsr	r18
 212:	26 95       	lsr	r18
 214:	22 0f       	add	r18, r18
 216:	32 2f       	mov	r19, r18
 218:	33 0f       	add	r19, r19
 21a:	33 0f       	add	r19, r19
 21c:	23 0f       	add	r18, r19
 21e:	82 1b       	sub	r24, r18
 220:	28 2f       	mov	r18, r24
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
 222:	96 95       	lsr	r25
 224:	96 95       	lsr	r25
 226:	96 95       	lsr	r25
	
	switch(Local_u8_Mode)
 228:	66 23       	and	r22, r22
 22a:	19 f0       	breq	.+6      	; 0x232 <M_Dio_PinWrite+0x2e>
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	e1 f1       	breq	.+120    	; 0x2a8 <M_Dio_PinWrite+0xa4>
 230:	08 95       	ret
	{
		case LOW:
		{
			switch(local_u8_Port) // select the port
 232:	92 30       	cpi	r25, 0x02	; 2
 234:	a9 f0       	breq	.+42     	; 0x260 <M_Dio_PinWrite+0x5c>
 236:	18 f4       	brcc	.+6      	; 0x23e <M_Dio_PinWrite+0x3a>
 238:	91 30       	cpi	r25, 0x01	; 1
 23a:	31 f0       	breq	.+12     	; 0x248 <M_Dio_PinWrite+0x44>
 23c:	08 95       	ret
 23e:	93 30       	cpi	r25, 0x03	; 3
 240:	d9 f0       	breq	.+54     	; 0x278 <M_Dio_PinWrite+0x74>
 242:	94 30       	cpi	r25, 0x04	; 4
 244:	29 f1       	breq	.+74     	; 0x290 <M_Dio_PinWrite+0x8c>
 246:	08 95       	ret
			{
				case PORT_A:	Clrbit(PORTA,Local_u8_Pin);	 break;
 248:	3b b3       	in	r19, 0x1b	; 27
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <M_Dio_PinWrite+0x50>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	2a 95       	dec	r18
 256:	e2 f7       	brpl	.-8      	; 0x250 <M_Dio_PinWrite+0x4c>
 258:	80 95       	com	r24
 25a:	83 23       	and	r24, r19
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	08 95       	ret
				case PORT_B:	Clrbit(PORTB,Local_u8_Pin);	 break;
 260:	38 b3       	in	r19, 0x18	; 24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <M_Dio_PinWrite+0x68>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	2a 95       	dec	r18
 26e:	e2 f7       	brpl	.-8      	; 0x268 <M_Dio_PinWrite+0x64>
 270:	80 95       	com	r24
 272:	83 23       	and	r24, r19
 274:	88 bb       	out	0x18, r24	; 24
 276:	08 95       	ret
				case PORT_C:	Clrbit(PORTC,Local_u8_Pin);	 break;
 278:	35 b3       	in	r19, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <M_Dio_PinWrite+0x80>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	2a 95       	dec	r18
 286:	e2 f7       	brpl	.-8      	; 0x280 <M_Dio_PinWrite+0x7c>
 288:	80 95       	com	r24
 28a:	83 23       	and	r24, r19
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	08 95       	ret
				case PORT_D:	Clrbit(PORTD,Local_u8_Pin);	 break;
 290:	32 b3       	in	r19, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <M_Dio_PinWrite+0x98>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	2a 95       	dec	r18
 29e:	e2 f7       	brpl	.-8      	; 0x298 <M_Dio_PinWrite+0x94>
 2a0:	80 95       	com	r24
 2a2:	83 23       	and	r24, r19
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret
			}// switch port
		}
		break;// Case input
		case HIGH:
		{
			switch(local_u8_Port) // select the port
 2a8:	92 30       	cpi	r25, 0x02	; 2
 2aa:	a1 f0       	breq	.+40     	; 0x2d4 <M_Dio_PinWrite+0xd0>
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <M_Dio_PinWrite+0xb0>
 2ae:	91 30       	cpi	r25, 0x01	; 1
 2b0:	31 f0       	breq	.+12     	; 0x2be <M_Dio_PinWrite+0xba>
 2b2:	08 95       	ret
 2b4:	93 30       	cpi	r25, 0x03	; 3
 2b6:	c9 f0       	breq	.+50     	; 0x2ea <M_Dio_PinWrite+0xe6>
 2b8:	94 30       	cpi	r25, 0x04	; 4
 2ba:	11 f1       	breq	.+68     	; 0x300 <M_Dio_PinWrite+0xfc>
 2bc:	08 95       	ret
			{
				case PORT_A:	Setbit(PORTA,Local_u8_Pin);	 break;
 2be:	3b b3       	in	r19, 0x1b	; 27
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <M_Dio_PinWrite+0xc6>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <M_Dio_PinWrite+0xc2>
 2ce:	83 2b       	or	r24, r19
 2d0:	8b bb       	out	0x1b, r24	; 27
 2d2:	08 95       	ret
				case PORT_B:	Setbit(PORTB,Local_u8_Pin);	 break;
 2d4:	38 b3       	in	r19, 0x18	; 24
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <M_Dio_PinWrite+0xdc>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	2a 95       	dec	r18
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <M_Dio_PinWrite+0xd8>
 2e4:	83 2b       	or	r24, r19
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	08 95       	ret
				case PORT_C:	Setbit(PORTC,Local_u8_Pin);	 break;
 2ea:	35 b3       	in	r19, 0x15	; 21
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <M_Dio_PinWrite+0xf2>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	2a 95       	dec	r18
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <M_Dio_PinWrite+0xee>
 2fa:	83 2b       	or	r24, r19
 2fc:	85 bb       	out	0x15, r24	; 21
 2fe:	08 95       	ret
				case PORT_D:	Setbit(PORTD,Local_u8_Pin);	 break;
 300:	32 b3       	in	r19, 0x12	; 18
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <M_Dio_PinWrite+0x108>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <M_Dio_PinWrite+0x104>
 310:	83 2b       	or	r24, r19
 312:	82 bb       	out	0x12, r24	; 18
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
