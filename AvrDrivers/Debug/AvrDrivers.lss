
AvrDrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3c  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064c  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065f  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "SSD.h"

int main(void)
{
	u8 X=0;
	H_Ssd_Init();
  6c:	0e 94 3e 00 	call	0x7c	; 0x7c <H_Ssd_Init>
#include "Pushbutton.h"
#include "SSD.h"

int main(void)
{
	u8 X=0;
  70:	c0 e0       	ldi	r28, 0x00	; 0
	H_Ssd_Init();
	
	
	while (1)
	{
		H_Ssd_DisplayNum(X);
  72:	8c 2f       	mov	r24, r28
  74:	0e 94 90 00 	call	0x120	; 0x120 <H_Ssd_DisplayNum>
		X++;
  78:	cf 5f       	subi	r28, 0xFF	; 255
  7a:	fb cf       	rjmp	.-10     	; 0x72 <main+0x6>

0000007c <H_Ssd_Init>:


// make the All SSD (7)pins output 
void H_Ssd_Init(void)
{
	M_Dio_PinMode(SSD_A_PIN,OUTPUT);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	8b e0       	ldi	r24, 0x0B	; 11
  80:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_B_PIN,OUTPUT);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_C_PIN,OUTPUT);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_D_PIN,OUTPUT);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_E_PIN,OUTPUT);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_F_PIN,OUTPUT);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD_G_PIN,OUTPUT);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	
	M_Dio_PinMode(SSD1_EN,OUTPUT);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	85 e1       	ldi	r24, 0x15	; 21
  b8:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
	M_Dio_PinMode(SSD2_EN,OUTPUT);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	86 e1       	ldi	r24, 0x16	; 22
  c0:	0e 94 ce 00 	call	0x19c	; 0x19c <M_Dio_PinMode>
  c4:	08 95       	ret

000000c6 <H_Ssd_Display>:
}

//-----------------__-------------------------------

void H_Ssd_Display(u8 Local_u8_Ssd ,u8 Local_u8_num)
{
  c6:	cf 93       	push	r28
  c8:	c6 2f       	mov	r28, r22
	switch(Local_u8_Ssd)
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	19 f0       	breq	.+6      	; 0xd4 <H_Ssd_Display+0xe>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	51 f0       	breq	.+20     	; 0xe6 <H_Ssd_Display+0x20>
  d2:	12 c0       	rjmp	.+36     	; 0xf8 <H_Ssd_Display+0x32>
	{
		case SSD_1:
		M_Dio_PinWrite(SSD1_EN,HIGH);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	85 e1       	ldi	r24, 0x15	; 21
  d8:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		M_Dio_PinWrite(SSD2_EN,LOW);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	86 e1       	ldi	r24, 0x16	; 22
  e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		break;
  e4:	11 c0       	rjmp	.+34     	; 0x108 <H_Ssd_Display+0x42>
		case SSD_2:
		M_Dio_PinWrite(SSD1_EN,LOW);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	85 e1       	ldi	r24, 0x15	; 21
  ea:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		M_Dio_PinWrite(SSD2_EN,HIGH);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	86 e1       	ldi	r24, 0x16	; 22
  f2:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		break;
  f6:	08 c0       	rjmp	.+16     	; 0x108 <H_Ssd_Display+0x42>
		default:
		M_Dio_PinWrite(SSD1_EN,LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	85 e1       	ldi	r24, 0x15	; 21
  fc:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		M_Dio_PinWrite(SSD2_EN,LOW);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	86 e1       	ldi	r24, 0x16	; 22
 104:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
		M_Dio_PinWrite(SSD_G_PIN,HIGH);
		break;
	}
#elif SSD_DECODER

		PORTA &= 0X0F;
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (Local_u8_num<<4);
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	90 e1       	ldi	r25, 0x10	; 16
 112:	c9 9f       	mul	r28, r25
 114:	b0 01       	movw	r22, r0
 116:	11 24       	eor	r1, r1
 118:	68 2b       	or	r22, r24
 11a:	6b bb       	out	0x1b, r22	; 27
		case 9: PORTA = 0x90 ;	break;
		default:				break;
	}
*/	
#endif
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <H_Ssd_DisplayNum>:


void H_Ssd_DisplayNum(u8 Local_u8_num)
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	u16 x=0;
	u8 Local_u8_uist = Local_u8_num%10;
 128:	1d ec       	ldi	r17, 0xCD	; 205
 12a:	81 9f       	mul	r24, r17
 12c:	11 2d       	mov	r17, r1
 12e:	11 24       	eor	r1, r1
 130:	01 2f       	mov	r16, r17
 132:	06 95       	lsr	r16
 134:	06 95       	lsr	r16
 136:	06 95       	lsr	r16
 138:	00 0f       	add	r16, r16
 13a:	90 2f       	mov	r25, r16
 13c:	99 0f       	add	r25, r25
 13e:	99 0f       	add	r25, r25
 140:	09 0f       	add	r16, r25
 142:	80 1b       	sub	r24, r16
 144:	08 2f       	mov	r16, r24
	u8 Local_u8_tens = Local_u8_num/10;
 146:	16 95       	lsr	r17
 148:	16 95       	lsr	r17
 14a:	16 95       	lsr	r17
}


void H_Ssd_DisplayNum(u8 Local_u8_num)
{
	u16 x=0;
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	u8 Local_u8_uist = Local_u8_num%10;
	u8 Local_u8_tens = Local_u8_num/10;
	
	while(x<200)
 150:	15 c0       	rjmp	.+42     	; 0x17c <H_Ssd_DisplayNum+0x5c>
	{
		H_Ssd_Display(SSD_1,Local_u8_uist);
 152:	60 2f       	mov	r22, r16
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 63 00 	call	0xc6	; 0xc6 <H_Ssd_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e9       	ldi	r24, 0x9F	; 159
 15c:	9f e0       	ldi	r25, 0x0F	; 15
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <H_Ssd_DisplayNum+0x3e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <H_Ssd_DisplayNum+0x44>
 164:	00 00       	nop
		_delay_ms(1);
		H_Ssd_Display(SSD_2,Local_u8_tens);
 166:	61 2f       	mov	r22, r17
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <H_Ssd_Display>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <H_Ssd_DisplayNum+0x52>
 176:	00 c0       	rjmp	.+0      	; 0x178 <H_Ssd_DisplayNum+0x58>
 178:	00 00       	nop
		_delay_ms(1);
		x++;
 17a:	21 96       	adiw	r28, 0x01	; 1
{
	u16 x=0;
	u8 Local_u8_uist = Local_u8_num%10;
	u8 Local_u8_tens = Local_u8_num/10;
	
	while(x<200)
 17c:	c8 3c       	cpi	r28, 0xC8	; 200
 17e:	d1 05       	cpc	r29, r1
 180:	40 f3       	brcs	.-48     	; 0x152 <H_Ssd_DisplayNum+0x32>
		H_Ssd_Display(SSD_2,Local_u8_tens);
		_delay_ms(1);
		x++;
	}
	
	M_Dio_PinWrite(SSD1_EN,LOW);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	85 e1       	ldi	r24, 0x15	; 21
 186:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
	M_Dio_PinWrite(SSD2_EN,LOW);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	86 e1       	ldi	r24, 0x16	; 22
 18e:	0e 94 57 01 	call	0x2ae	; 0x2ae <M_Dio_PinWrite>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <M_Dio_PinMode>:
// and another to select out or input (mode)
void M_Dio_PinMode(u8 Local_u8_num , u8 Local_u8_Mode)
{
	// variable to select the pin number -> 
	//ex:Local_u8_num =PA4 = (14) mean pin 4
	u8 Local_u8_Pin = Local_u8_num %10;
 19c:	9d ec       	ldi	r25, 0xCD	; 205
 19e:	89 9f       	mul	r24, r25
 1a0:	91 2d       	mov	r25, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	29 2f       	mov	r18, r25
 1a6:	26 95       	lsr	r18
 1a8:	26 95       	lsr	r18
 1aa:	26 95       	lsr	r18
 1ac:	22 0f       	add	r18, r18
 1ae:	32 2f       	mov	r19, r18
 1b0:	33 0f       	add	r19, r19
 1b2:	33 0f       	add	r19, r19
 1b4:	23 0f       	add	r18, r19
 1b6:	82 1b       	sub	r24, r18
 1b8:	28 2f       	mov	r18, r24
	// variable to select the port -> (14) mean port 1(A)
	u8 local_u8_Port = Local_u8_num /10;
 1ba:	96 95       	lsr	r25
 1bc:	96 95       	lsr	r25
 1be:	96 95       	lsr	r25
	
	switch(Local_u8_Mode) // switch the mode is input or output
 1c0:	66 23       	and	r22, r22
 1c2:	19 f0       	breq	.+6      	; 0x1ca <M_Dio_PinMode+0x2e>
 1c4:	61 30       	cpi	r22, 0x01	; 1
 1c6:	e1 f1       	breq	.+120    	; 0x240 <M_Dio_PinMode+0xa4>
 1c8:	08 95       	ret
	{
		case INPUT:
		{
			switch(local_u8_Port) // switch the port (A,B,C,D)
 1ca:	92 30       	cpi	r25, 0x02	; 2
 1cc:	a9 f0       	breq	.+42     	; 0x1f8 <M_Dio_PinMode+0x5c>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <M_Dio_PinMode+0x3a>
 1d0:	91 30       	cpi	r25, 0x01	; 1
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <M_Dio_PinMode+0x44>
 1d4:	08 95       	ret
 1d6:	93 30       	cpi	r25, 0x03	; 3
 1d8:	d9 f0       	breq	.+54     	; 0x210 <M_Dio_PinMode+0x74>
 1da:	94 30       	cpi	r25, 0x04	; 4
 1dc:	29 f1       	breq	.+74     	; 0x228 <M_Dio_PinMode+0x8c>
 1de:	08 95       	ret
			{
				case PORT_A:	Clrbit(DDRA,Local_u8_Pin);	 break;
 1e0:	3a b3       	in	r19, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <M_Dio_PinMode+0x50>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	2a 95       	dec	r18
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <M_Dio_PinMode+0x4c>
 1f0:	80 95       	com	r24
 1f2:	83 23       	and	r24, r19
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	08 95       	ret
				case PORT_B:	Clrbit(DDRB,Local_u8_Pin);	 break;
 1f8:	37 b3       	in	r19, 0x17	; 23
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <M_Dio_PinMode+0x68>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	2a 95       	dec	r18
 206:	e2 f7       	brpl	.-8      	; 0x200 <M_Dio_PinMode+0x64>
 208:	80 95       	com	r24
 20a:	83 23       	and	r24, r19
 20c:	87 bb       	out	0x17, r24	; 23
 20e:	08 95       	ret
				case PORT_C:	Clrbit(DDRC,Local_u8_Pin);	 break;
 210:	34 b3       	in	r19, 0x14	; 20
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <M_Dio_PinMode+0x80>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	2a 95       	dec	r18
 21e:	e2 f7       	brpl	.-8      	; 0x218 <M_Dio_PinMode+0x7c>
 220:	80 95       	com	r24
 222:	83 23       	and	r24, r19
 224:	84 bb       	out	0x14, r24	; 20
 226:	08 95       	ret
				case PORT_D:	Clrbit(DDRD,Local_u8_Pin);	 break;
 228:	31 b3       	in	r19, 0x11	; 17
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <M_Dio_PinMode+0x98>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	2a 95       	dec	r18
 236:	e2 f7       	brpl	.-8      	; 0x230 <M_Dio_PinMode+0x94>
 238:	80 95       	com	r24
 23a:	83 23       	and	r24, r19
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	08 95       	ret
			}// switch port
		}
		break;// Case input
		case OUTPUT:
		{
			switch(local_u8_Port) // select the port
 240:	92 30       	cpi	r25, 0x02	; 2
 242:	a1 f0       	breq	.+40     	; 0x26c <M_Dio_PinMode+0xd0>
 244:	18 f4       	brcc	.+6      	; 0x24c <M_Dio_PinMode+0xb0>
 246:	91 30       	cpi	r25, 0x01	; 1
 248:	31 f0       	breq	.+12     	; 0x256 <M_Dio_PinMode+0xba>
 24a:	08 95       	ret
 24c:	93 30       	cpi	r25, 0x03	; 3
 24e:	c9 f0       	breq	.+50     	; 0x282 <M_Dio_PinMode+0xe6>
 250:	94 30       	cpi	r25, 0x04	; 4
 252:	11 f1       	breq	.+68     	; 0x298 <M_Dio_PinMode+0xfc>
 254:	08 95       	ret
			{
				case PORT_A:	Setbit(DDRA,Local_u8_Pin);	 break;
 256:	3a b3       	in	r19, 0x1a	; 26
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <M_Dio_PinMode+0xc6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <M_Dio_PinMode+0xc2>
 266:	83 2b       	or	r24, r19
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
				case PORT_B:	Setbit(DDRB,Local_u8_Pin);	 break;
 26c:	37 b3       	in	r19, 0x17	; 23
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <M_Dio_PinMode+0xdc>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	2a 95       	dec	r18
 27a:	e2 f7       	brpl	.-8      	; 0x274 <M_Dio_PinMode+0xd8>
 27c:	83 2b       	or	r24, r19
 27e:	87 bb       	out	0x17, r24	; 23
 280:	08 95       	ret
				case PORT_C:	Setbit(DDRC,Local_u8_Pin);	 break;
 282:	34 b3       	in	r19, 0x14	; 20
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <M_Dio_PinMode+0xf2>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	2a 95       	dec	r18
 290:	e2 f7       	brpl	.-8      	; 0x28a <M_Dio_PinMode+0xee>
 292:	83 2b       	or	r24, r19
 294:	84 bb       	out	0x14, r24	; 20
 296:	08 95       	ret
				case PORT_D:	Setbit(DDRD,Local_u8_Pin);	 break;
 298:	31 b3       	in	r19, 0x11	; 17
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <M_Dio_PinMode+0x108>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	2a 95       	dec	r18
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <M_Dio_PinMode+0x104>
 2a8:	83 2b       	or	r24, r19
 2aa:	81 bb       	out	0x11, r24	; 17
 2ac:	08 95       	ret

000002ae <M_Dio_PinWrite>:

/*******************************************************************************************************/
void M_Dio_PinWrite(u8 Local_u8_num , u8 Local_u8_Mode)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
 2ae:	9d ec       	ldi	r25, 0xCD	; 205
 2b0:	89 9f       	mul	r24, r25
 2b2:	91 2d       	mov	r25, r1
 2b4:	11 24       	eor	r1, r1
 2b6:	29 2f       	mov	r18, r25
 2b8:	26 95       	lsr	r18
 2ba:	26 95       	lsr	r18
 2bc:	26 95       	lsr	r18
 2be:	22 0f       	add	r18, r18
 2c0:	32 2f       	mov	r19, r18
 2c2:	33 0f       	add	r19, r19
 2c4:	33 0f       	add	r19, r19
 2c6:	23 0f       	add	r18, r19
 2c8:	82 1b       	sub	r24, r18
 2ca:	28 2f       	mov	r18, r24
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
 2cc:	96 95       	lsr	r25
 2ce:	96 95       	lsr	r25
 2d0:	96 95       	lsr	r25
	
	switch(Local_u8_Mode)
 2d2:	66 23       	and	r22, r22
 2d4:	19 f0       	breq	.+6      	; 0x2dc <M_Dio_PinWrite+0x2e>
 2d6:	61 30       	cpi	r22, 0x01	; 1
 2d8:	e1 f1       	breq	.+120    	; 0x352 <M_Dio_PinWrite+0xa4>
 2da:	08 95       	ret
	{
		case LOW:
		{
			switch(local_u8_Port) // select the port
 2dc:	92 30       	cpi	r25, 0x02	; 2
 2de:	a9 f0       	breq	.+42     	; 0x30a <M_Dio_PinWrite+0x5c>
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <M_Dio_PinWrite+0x3a>
 2e2:	91 30       	cpi	r25, 0x01	; 1
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <M_Dio_PinWrite+0x44>
 2e6:	08 95       	ret
 2e8:	93 30       	cpi	r25, 0x03	; 3
 2ea:	d9 f0       	breq	.+54     	; 0x322 <M_Dio_PinWrite+0x74>
 2ec:	94 30       	cpi	r25, 0x04	; 4
 2ee:	29 f1       	breq	.+74     	; 0x33a <M_Dio_PinWrite+0x8c>
 2f0:	08 95       	ret
			{
				case PORT_A:	Clrbit(PORTA,Local_u8_Pin);	 break;
 2f2:	3b b3       	in	r19, 0x1b	; 27
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <M_Dio_PinWrite+0x50>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	2a 95       	dec	r18
 300:	e2 f7       	brpl	.-8      	; 0x2fa <M_Dio_PinWrite+0x4c>
 302:	80 95       	com	r24
 304:	83 23       	and	r24, r19
 306:	8b bb       	out	0x1b, r24	; 27
 308:	08 95       	ret
				case PORT_B:	Clrbit(PORTB,Local_u8_Pin);	 break;
 30a:	38 b3       	in	r19, 0x18	; 24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <M_Dio_PinWrite+0x68>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	2a 95       	dec	r18
 318:	e2 f7       	brpl	.-8      	; 0x312 <M_Dio_PinWrite+0x64>
 31a:	80 95       	com	r24
 31c:	83 23       	and	r24, r19
 31e:	88 bb       	out	0x18, r24	; 24
 320:	08 95       	ret
				case PORT_C:	Clrbit(PORTC,Local_u8_Pin);	 break;
 322:	35 b3       	in	r19, 0x15	; 21
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <M_Dio_PinWrite+0x80>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	2a 95       	dec	r18
 330:	e2 f7       	brpl	.-8      	; 0x32a <M_Dio_PinWrite+0x7c>
 332:	80 95       	com	r24
 334:	83 23       	and	r24, r19
 336:	85 bb       	out	0x15, r24	; 21
 338:	08 95       	ret
				case PORT_D:	Clrbit(PORTD,Local_u8_Pin);	 break;
 33a:	32 b3       	in	r19, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <M_Dio_PinWrite+0x98>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	2a 95       	dec	r18
 348:	e2 f7       	brpl	.-8      	; 0x342 <M_Dio_PinWrite+0x94>
 34a:	80 95       	com	r24
 34c:	83 23       	and	r24, r19
 34e:	82 bb       	out	0x12, r24	; 18
 350:	08 95       	ret
			}// switch port
		}
		break;// Case input
		case HIGH:
		{
			switch(local_u8_Port) // select the port
 352:	92 30       	cpi	r25, 0x02	; 2
 354:	a1 f0       	breq	.+40     	; 0x37e <M_Dio_PinWrite+0xd0>
 356:	18 f4       	brcc	.+6      	; 0x35e <M_Dio_PinWrite+0xb0>
 358:	91 30       	cpi	r25, 0x01	; 1
 35a:	31 f0       	breq	.+12     	; 0x368 <M_Dio_PinWrite+0xba>
 35c:	08 95       	ret
 35e:	93 30       	cpi	r25, 0x03	; 3
 360:	c9 f0       	breq	.+50     	; 0x394 <M_Dio_PinWrite+0xe6>
 362:	94 30       	cpi	r25, 0x04	; 4
 364:	11 f1       	breq	.+68     	; 0x3aa <M_Dio_PinWrite+0xfc>
 366:	08 95       	ret
			{
				case PORT_A:	Setbit(PORTA,Local_u8_Pin);	 break;
 368:	3b b3       	in	r19, 0x1b	; 27
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <M_Dio_PinWrite+0xc6>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	2a 95       	dec	r18
 376:	e2 f7       	brpl	.-8      	; 0x370 <M_Dio_PinWrite+0xc2>
 378:	83 2b       	or	r24, r19
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	08 95       	ret
				case PORT_B:	Setbit(PORTB,Local_u8_Pin);	 break;
 37e:	38 b3       	in	r19, 0x18	; 24
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <M_Dio_PinWrite+0xdc>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	2a 95       	dec	r18
 38c:	e2 f7       	brpl	.-8      	; 0x386 <M_Dio_PinWrite+0xd8>
 38e:	83 2b       	or	r24, r19
 390:	88 bb       	out	0x18, r24	; 24
 392:	08 95       	ret
				case PORT_C:	Setbit(PORTC,Local_u8_Pin);	 break;
 394:	35 b3       	in	r19, 0x15	; 21
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <M_Dio_PinWrite+0xf2>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	2a 95       	dec	r18
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <M_Dio_PinWrite+0xee>
 3a4:	83 2b       	or	r24, r19
 3a6:	85 bb       	out	0x15, r24	; 21
 3a8:	08 95       	ret
				case PORT_D:	Setbit(PORTD,Local_u8_Pin);	 break;
 3aa:	32 b3       	in	r19, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <M_Dio_PinWrite+0x108>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	2a 95       	dec	r18
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <M_Dio_PinWrite+0x104>
 3ba:	83 2b       	or	r24, r19
 3bc:	82 bb       	out	0x12, r24	; 18
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
